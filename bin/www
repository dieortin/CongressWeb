#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const fs = require('fs')
const debug = require('debug')('congressweb:server')
const http = require('http')
const https = require('https')
const path = require('path')

/// Setup HTTPS 
let options = {}
try {
	options = {
		cert: fs.readFileSync(path.join(__dirname, '../sslcert', 'cert.pem')),
		key: fs.readFileSync(path.join(__dirname, '../sslcert', 'key.pem'))
	}
} catch (err) {
	if (err.code === 'ENOENT') {
		console.log('Couldn\'t find a certificate file at ' + err.path)
		process.exit(1) // Exit with error
	} else {
		throw err
	}
}

/**
 * Get port from environment and store in Express.
 */

const host = (process.env.HOST || 'localhost')
const port = normalizePort(process.env.PORT || '3000')
const sslPort = normalizePort(process.env.SSLPORT || '8443')
app.set('port', port)

/**
 * Create HTTP server.
 */

const sslServer = https.createServer(options, app)

const legacy = http.createServer(app)
/**
 * Listen on provided port, on all network interfaces.
 */


sslServer.listen(sslPort, host)
sslServer.on('error', onError)
sslServer.on('listening', onListening)

legacy.listen(port, host)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
	// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error
	}

	const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges')
		process.exit(1)
		break
	case 'EADDRINUSE':
		console.error(bind + ' is already in use')
		process.exit(1)
		break
	default:
		throw error
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = sslServer.address()
	const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
	if (host) debug('Host is ' + host) 
	debug('Listening on ' + bind)
}

